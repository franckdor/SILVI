# Utilisation:
# se mettre au niveau du code.
# Voir : https://www.r-bloggers.com/2019/11/automated-testing-with-testthat-in-practice/
#

# setwd("/Users/dorkeld/Documents/old_documents/travail_mac/projets/Code_LOIRE_SILVI/Debuggage_alignements/code")

# source("../../code/SILVI.R") # This is only needed if your project is not a package
# source("/Users/dorkeld/Documents/old_documents/travail_mac/projets/Code_LOIRE_SILVI/Debuggage_alignements/code/t_process_blast.R")
source("t_process_blast.R")

# Install package from CRAN only if not installed, and load the library
if (!require(testthat)) install.packages('testthat')
library(testthat)

test_that("test de process_blast", {

  # lecture d'un fichier fasta de test
  # pour faire une dataframe de test
  
  FASTA_FILE="../tests_data/1_blastme_I_pf_csp.fasta"
  
  peptide <- c()         #vector() # un vecteur de peptides
  
  con = file(FASTA_FILE, "r")
  while ( TRUE ) {
    line = readLines(con, n = 1)
    if ( length(line) == 0 ) {
      break
    }
    #print(line)
    if (! startsWith(line, ">")  ) {
      # print (line)
      peptide <- c(peptide,line)
    }
  }
  
  close(con)
  
  df <- data.frame(peptide, stringsAsFactors=FALSE)
  # df$peptide <- factor(df$peptide)
  df <- as_tibble(df)
  
  cat(" len peptide : ",length(peptide),"\n")
  
  
  PATH_TO_BLAST_TXT="../pf_csp_alignment_I.txt"
  res_df <- add_best_from_blast(df,PATH_TO_BLAST_TXT)
  
  
  
  
  
  
})
